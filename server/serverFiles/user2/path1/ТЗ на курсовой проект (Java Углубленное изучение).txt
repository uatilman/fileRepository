

----------------------- 1 -----------------------
1) Клиент-серверная архитектура
2) Передача данных организуется через сокеты, для обработки клиентов сервер поднимает отдельные Threadы(возможно держать всех клиентов на одном Threadе) / Многопоточный сервер
3) Должен иметься функционал по отправке файлов на сервер, скачиванию, удалению, обновлению, переименование, перемещение файлов в рамках хранилища. Общение клиента с сервером организуется через команды.
4) Клиент должен иметь возможность видеть файлы, лежащие на сервере
5) Необходима авторизация и регистрация[регистрация по желанию] клиентов через БД. Для регистрации, клиент отсылает команду серверу, и сервер добавляет запись в БД.
6) Реализация клиента на JavaFX, или Swing, клиент должен иметь возможность указать путь к локальному хранилищу. 
7) Для сервера неплохо было бы тоже сделать простенький интерфейс [по желанию]
8) Можно разбить проект на три модуля client, server, common(network) [по желанию]
9) Передача файлов и команд может организоваться либо через передачу каких-либо сообщений по сети, либо через сериализацию(какой-нибудь касс Message), либо любой другой выбранный вами способ
10) Файлы на сервере должны быть как-то ассоциированы с пользователем (самый простой вариант файлы относящиеся к пользователю user1, будут лежать на сервере в папке user1)
11) Самый простой вариант: для каждого пользователя на стороне сервера создаем папку и там храним его файлы
----------------------- 2 -----------------------	
1) На сервере файлы хранятся не в папках с никами клиентов(как-нибудь через хеш)
2) Дать пользователю возможность создавать папки в своем хранилище(основной вопрос: как хранить/передавать дерево каталогов/файлов)
4) Хеширование пароля в БД (не хранить пароль в открытом виде)
5) Решать конфликты имён (либо переписывать, либо меняьт имя, либо предлагать выбрать вариант пользователю)
6) Отключение клиента по таймауту [по желанию]
7) Для отправки файла на сервер использовать drag'n'drop в клиенте
8) Ограничить объем памяти на сервере доступный клиенту
----------------------- 3 -----------------------
1) Добавить возможность синхронизации файлов на сервере клиента в одном из направлений server->client и client->server
2) Реализация возможности одновременного подключения с разных устройств [по желанию]
3) Передача данных авторизации по сети не в открытом виде
4) Sharing возможность давать доступ к файлам другим пользователям; добавить варианты доступа к файлу: личный/публичный/ограниченный круг лиц; возможность реализации групп для общего пользования файлами со своим пространством 
(только члены могут смотреть и менять)
5) Сбор статистики по работе с облаком
6) Добавить оповещения о неиспользовании сохраненных файлов
----------------------- 4 -----------------------
1) Ежедневное/почасовое кеширование хранилища для проверки неизменности файлов(Безопасность)
2) Подумать над безопасностью передачи данных. Оптимальное хранение данных(сжатие и т.п.)
----------------------- ? -----------------------
1) Регистрация по имейлу с возможностью восстановлением (договор оферты на использоаание хранилища и 
соблюдения условий о срхраняемых файлах)
2) Доп аутентификация??
3) Хитрое защищенное хранение файлов
4) Отсылка файлов/ссылок по дате или таймауту
5) Надо ли БД хранить какую-то информацию по файлам?
6) В идеале это должна быть интеграция в существующие "проводник-style" приложения в целевых ОС. 
7) Локальный репозиторий файлов(копия облака), чтобы снизить нагрузку на сеть
8) REST API/HTTP
----------------------- Идеи реализации -----------------------
- При отправке файла на сервер клиент вначале создает служебный пакет, в котором будет указано, на сколько частей и какого размера будет разбит файл, потом отправляет эти фрагменты с указанием хэш-суммы. Так при ошибке пересылки фрагмента передающей стороне не придется пересылать весь файл заново - принимающий сможет запросить только нужный фрагмент.
- Запрос версии файлов
Сервер должен вести цепочку версионности файла, например, в виде хэша. Цепочка необходима для отслеживания истории изменения файла, 
чтобы реализовать синхронизацию и запросы пользователю вроде "версии файлов отличаются, какую загрузить в хранилище?"
- Ведение реестра файлов. Каждому файлу в момент создания НА СЕРВЕРЕ должен присваиваться уникальный идентификатор (УИД).
До тех пор, пока локально сохраненный (на клиенте) файл не был ни разу загружен на сервер - он не будет иметь УИД.
При присвоении УИДа будет проверяться имя файла и, в случае конфликта, должен выдаваться запрос на предмет "а тот же самый это файл или нет".
Если файл тот же, то он будет учитываться под тем же УИДом. Если нет, то от пользователя будет запрошено переименование и присвоен новый УИД.
УИД нужен для того, чтобы экономить траффик в тех случаях, когда файл был, например, переименован и\или перемещен.
Цепочка версионности также будет привязана к этому идентификатору.
- Если HTTP не зайдёт, то можно по сокетам, посылать команды в голом виде особым форматом. Исследовал вопрос того как лучше перекидывать файлы через сокет. И судя по всему java.nio лучше стандартного java.io. Т.е. можно использовать FileChannel для отправки файлов по сокету и быстро и просто (в отличии от HTTP, например).
- Регистрация с помощью нескольких источников (RegistrationFactory: Google, Facebook - можно попробовать что-то одно прикрутить)
Инфа по Google+: https://developers.google.com/+/web/samples/java